-- marketing funnel - beta 1 ITA

--Empower users who have been with Empower for >= 6 months and whose sub is currently active
-- drop table #Empower_Subs;

with driver as (
    select distinct a.userid
        , a.datecreated as user_created_date
        , b.usersubscriptionid
        , b.startDate as sub_start_date
        , b.endDate as sub_end_date
        , case when subscriptionStatus = 0 then 'None'
            when subscriptionStatus = 1 then 'Active'
            when subscriptionStatus = 2 then 'Overdue'
            when subscriptionStatus = 3 then 'Canceled'
            when subscriptionStatus = 4 then 'Delinquent'
            when subscriptionStatus = 5 then 'Closed by User'
            when subscriptionStatus = 6 then 'Closed by Empower'
            when subscriptionStatus = 7 then 'Pending Payment'
            when subscriptionStatus = 8 then 'Trial Autoclose'
            when subscriptionStatus = 9 then 'Subscription Paused'
            end as current_subscriptionStatus
        , rank() over (partition by a.userid order by b.startDate desc) as subscription_recency
    from matillion.prod_user A
    left join matillion.prod_usersubscription b
        on a.userid = b.userid
    where DATEDIFF(day,datecreated,GETDATE()) >= 90
        and DATEDIFF(day,startDate,GETDATE()) >= 90
    -- where DATEDIFF(day,datecreated,GETDATE()) >= 180
    --     and DATEDIFF(day,startDate,GETDATE()) >= 180
        and subscriptionStatus = 1 --active sub only
)

select userid
    , user_created_date
    , usersubscriptionid
    , sub_start_date
into #Empower_Subs
from driver
where subscription_recency = 1
;

-- select top 100 * from #Empower_Subs;
-- select count(*), count(distinct userid) from #Empower_Subs; --849k (6m active) | 928K (5m) |  1.0M (4m) | 1.1M (3m)

-- select top 10 userid, count(*) from #Empower_Subs group by userid order by 2 desc;
-- select top 10 * from #Empower_Subs where userid = 6873308;
-- select top 100  * from matillion.prod_loans


--Has never had a Thrive account
-- drop table #not_thrive_users;

select a.*
into #not_thrive_users 
from #Empower_Subs a
where userid not in (select userid 
                        from matillion.prod_loans) --never had a Thrive account
;

-- select top 100 * from #not_thrive_users;
-- select count(*), count(distinct userid) from #not_thrive_users; --631k (6m active) | 686k (5m) | 746k (4m) | 805k (3m)


--Passes CP

--Model score < 0.1 (actual cutoff 0.12)
-- drop table #AriesPQPasses;

select a.*
    , b.usercreditvariableid
    , b.dategenerated
    , b.mlmodelscore
    , b.TotalHistoryInDays
    , b.PckAcctCurrBal
into #AriesPQPasses
FROM #not_thrive_users a
inner join (select a.usercreditvariableid
            , a.dategenerated
            , a.mlmodelscore
            , b.TotalHistoryInDays
            , b.PckAcctCurrBal
            , b.userid
            , row_number() over (partition by userid order by dategenerated desc) as score_rank
            from matillion.prod_UserCreditVariableAriesPrequal A
            left join matillion.prod_usercreditvariableberyllium b
                on a.usercreditvariableid = b.usercreditvariableid
            where dategenerated >= '2024-06-01'
                and a.mlmodelscore <=0.105
                -- and a.mlmodelscore <=0.1
                and userid is not null) b
    on a.userid = b.userid
where score_rank = 1
;

-- select top 100 * 
-- from matillion.prod_usercreditvariableberyllium
-- where userid = 1046851
--     and dategenerated >= '2024-04-01';

-- select top 100 * from #AriesPQPasses;
-- select count(*), count(distinct userid) from #AriesPQPasses; --114k (6m active) | 122k (5m) | 132k (4m) | 139k (3m) | 152k (0.105 cutoff)

-- user credit variables pass
-- drop table #ucv_pass;

-- **add 3+ recurring paychecks
select a.*
    , b.accountid
    , b.paycheckmonthlydollaramount
    , b.paycheckidentificationmethod
    , b.paycheckid_text
    , b.createdat
-- into #AriesPQPasses2
into #ucv_pass
from #AriesPQPasses a
inner join (select userid
            , accountid
            , paycheckmonthlydollaramount
            , paycheckidentificationmethod
            -- , case when paycheckidentificationmethod = 1 then 'BF pass' --Brute Force?
                -- when paycheckidentificationmethod = 7 then 'Variable Income'
                -- else 'minimum income' end as paycheckid_text
            , case when paycheckidentificationmethod = 1 then 'BruteForce' --https://github.com/empowerfinance/empower-app/blob/4312459f84e02098e1c97e9f5a1c5d7a1c01eff1/empower.api/empower.api.data/Model/UserPaycheck.cs
                when paycheckidentificationmethod = 2 then 'DeepSearch'
                when paycheckidentificationmethod = 3 then 'Tagging'
                when paycheckidentificationmethod = 4 then 'VariableIncomeInMonth'
                when paycheckidentificationmethod = 5 then 'SinglePaycheckAtEmpower'
                when paycheckidentificationmethod = 6 then 'PayrollProviderVerified'
                when paycheckidentificationmethod = 7 then 'MinimalIncome'
                else null end as paycheckid_text
            , createdat
            , row_number() over (PARTITION by userid order by createdat desc) as most_recent_flag
            from matillion.prod_userpaychecks) b
    on a.userid = b.userid
where b.most_recent_flag = 1
    and paycheckmonthlydollaramount >= 1000
    and paycheckid_text = 'BruteForce'
    and PckAcctCurrBal >= -350
    and TotalHistoryInDays >= 30
;

-- select top 100 * from #ucv_pass;
-- select count(*), count(distinct userid) from #ucv_pass; --98k (6m active) | 105k (5m) | 113k (4m) | 119k (3m) | 129k (0.105 cutoff)
-- select top 30 cast(createdat as date), count(*) from #ucv_pass group by cast(createdat as date) order by 1;

-- select top 100 * from matillion.prod_usercreditmodel;
-- select distinct paycheckidentificationmethod from matillion.prod_userpaychecks order by 1;
-- select top 100 * from matillion.prod_userpaychecks;

-- -- drop table #ucv_pass;
-- select top 100 * from matillion.prod_userpaychecks where userid = 10135736 order by createdat desc;
-- select top 100 * from matillion.prod_usercreditmodel where userid = 10135736 order by dategenerated desc;

-- select * from #AriesPQPasses2

-- select a.*
--     , b.mlmodelscore
--     , b.PckAcctCurrBal
--     , b.paycheckmonthlydollaramount
--     , b.paycheckid_text
-- into #cp_pass
-- from #not_thrive_users a
-- left join #AriesPQPasses2 b
--     on a.userid = b.userid
-- where paycheckmonthlydollaramount >= 1000
--     and paycheckid_text = 'BF pass'
--     and PckAcctCurrBal >= -350
--     and TotalHistoryInDays >= 30;

-- select count(*) from  #cp_pass;

-- select * from dbt.creditcard_payment_core

-- select top 100 * from matillion.prod_useraddresses;


-- limit to 5 states
-- drop table #in_footprint;

select distinct a.*
    -- , b.STATE
into #in_footprint
from #ucv_pass a
inner join matillion.prod_useraddresses b
    on a.userid = b.userid
    and b.state in ('FL','GA','TX','PA','OH')
    and b."primary" = 1
    and b.addressline1 is not null
    and b.zip is not null
    and b.city is not null
    and b.addresstype = 0
;

-- select top 100 * from #in_footprint;-- where userid = 146437;
-- select count(*), count(distinct userid) from #in_footprint; --3,900 (6m active) | 4,127 (5m) | 4,387 (4m) | 4,558 (3m) | 5,035 (0.105 cutoff)

-- select top 100 userid, count(*) from #in_footprint group by userid order by 2 desc;

-- check cash advance status
--select top 100 * from matillion.prod_usercashadvance
--select distinct cashadvancestatus from matillion.prod_usercashadvance
-- select top 100 * from matillion.prod_usercashadvancesubscription where usersubscriptionid = ;

-- cash advance status

-- remove late & charged off CA users
with driver as (
    select a.*
        , c.cashadvancestatus
        , c.advancedate
        , c.repaydate
        , case when c.cashadvancestatus = 0 then 'Created' --default state
            when c.cashadvancestatus = 1 then 'Active' --disbursement successful
            when c.cashadvancestatus = 2 then 'Repaid' --repayment successful
            when c.cashadvancestatus = 3 then 'Defaulted' --after unable to collect 180d
            when c.cashadvancestatus = 4 then 'Late' --unable to collect
            when c.cashadvancestatus = 5 then 'Repaying' --pending payment
            when c.cashadvancestatus = 6 then 'Unable to Advance' --disbursement failed
            when c.cashadvancestatus = 7 then 'Pending' --pending disbursement
            when c.cashadvancestatus = 8 then 'Unable to Collect' --collection failure
            else 'Never had CA' end as ca_status --not in cash advance table
        , rank() over (partition by a.userid order by advancedate desc) as recency_rank
    -- into #cash_advance_status
    from #in_footprint a
    left join matillion.prod_usercashadvancesubscription b
        on a.userid = b.userid
    left join matillion.prod_usercashadvance c
        on b.usercashadvancesubscriptionid = c.usercashadvancesubscriptionid
)

select *--cashadvancestatus
    -- , 
    -- ca_status
    -- , count(*) as count
into #final
from driver
where recency_rank = 1
    and ca_status not in ('Late','Defaulted')
-- group by-- cashadvancestatus, 
    -- ca_status
-- order by 2 desc

-- select count(*), count(distinct userid) from #final; --4,965

-- select top 100 * from dbt.ca_core;
